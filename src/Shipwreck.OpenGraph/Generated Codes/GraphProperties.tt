<#@ template language="C#" debug="True" #>
<#@ assembly name="System.Core.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ output extension="cs" #>
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using Shipwreck.OpenGraph.Internal;

namespace Shipwreck.OpenGraph
{
<#

var properties = new []
{
    new M("GraphObject", "AlternateLocale", "string", isArray: true) { Path = "locale:alternate" },
    new M("GraphObject", "Image", "GraphImage", isArray: true),
    new M("GraphObject", "Video", "GraphVideo", isArray: true),
    new M("GraphObject", "Audio", "GraphAudio", isArray: true),
    new M("GraphObject", "Restriction", "GraphRestriction", isArray: true) { Path = "restrictions" },
    new M("GraphObject", "SeeAlso", "string", isArray: true),
    new M("GraphObject", "Title", "string"),
    new M("GraphObject", "Type", "string"),
    new M("GraphObject", "Url", "string"),
    new M("GraphObject", "Description", "string"),
    new M("GraphObject", "Determiner", "string"),
    new M("GraphObject", "Locale", "string"),
    new M("GraphObject", "RichAttachment", "Boolean?"),
    new M("GraphObject", "SiteName", "string"),
    new M("GraphObject", "TimeToLive", "Int32?") { Path = "ttl" },
    new M("GraphObject", "UpdatedTime", "DateTime?"),
    
    new M("Graph", "AndroidApp", "AndroidApplink", isArray: true) { Path = "al:android", IsAbsolute = true },
    new M("Graph", "IosApp", "IosApplink", isArray: true) { Path = "al:ios", IsAbsolute = true },
    new M("Graph", "IPadApp", "IosApplink", isArray: true) { Path = "al:ipad", IsAbsolute = true },
    new M("Graph", "IPhoneApp", "IosApplink", isArray: true) { Path = "al:iphone", IsAbsolute = true },
    new M("Graph", "WebApp", "Weblink", isArray: true) { Path = "al:web", IsAbsolute = true },
    new M("Graph", "WindowsApp", "WindowsApplink", isArray: true) { Path = "al:windows", IsAbsolute = true },
    new M("Graph", "WindowsPhoneApp", "WindowsApplink", isArray: true) { Path = "al:windows_phone", IsAbsolute = true },
    new M("Graph", "WindowsUniversalApp", "WindowsApplink", isArray: true) { Path = "al:windows_universal", IsAbsolute = true },
    new M("Graph", "FacebookAdmin", "string", isArray: true) { Path = "fb:admins", IsAbsolute = true },
    new M("Graph", "FacebookAppId", "Int64?") { Path = "fb:app_id", IsAbsolute = true },
    new M("Graph", "FacebookPage", "string", isArray: true) { Path = "fb:pages", IsAbsolute = true },
    new M("Graph", "FacebookProfileId", "Int64?") { Path = "fb:profile_id", IsAbsolute = true },
    new M("Graph", "Location", "GeoPoint", isArray: true) { Path = "place:location", IsAbsolute = true },

    new M("GraphAudio", "SecureUrl", "string"),

    new M("GraphImage", "SecureUrl", "string"),
    new M("GraphImage", "Width", "Int32?"),
    new M("GraphImage", "Height", "Int32?"),
    new M("GraphImage", "Alt", "string"),
    new M("GraphImage", "UserGenerated", "Boolean?"),

    new M("GraphVideo", "SecureUrl", "string"),
    new M("GraphVideo", "Width", "Int32?"),
    new M("GraphVideo", "Height", "Int32?"),
    new M("GraphVideo", "Alt", "string"),

    new M("GraphRestriction", "AllowedContry", "string", isArray: true) { Plural = "AllowedCountries", Path = "country:allowed" },
    new M("GraphRestriction", "DisallowedContry", "string", isArray: true) { Plural = "DisallowedCountries", Path = "country:disallowed" },
    new M("GraphRestriction", "Age", "string"),
    new M("GraphRestriction", "Content", "string", isArray: true),

    new M("ContactData", "StreetAddress", "string"),
    new M("ContactData", "Locality", "string"),
    new M("ContactData", "PostalCode", "string"),
    new M("ContactData", "Region", "string"),
    new M("ContactData", "CountryName", "string"),
    new M("ContactData", "Email", "string"),
    new M("ContactData", "PhoneNumber", "string"),
    new M("ContactData", "FaxNumber", "string"),
    new M("ContactData", "Website", "string"),
    
    new M("GeoPoint", "Latitude", "Single?"),
    new M("GeoPoint", "Longitude", "Single?"),
    new M("GeoPoint", "Altitude", "Single?"),

    new M("Quantity", "Value", "Single?"),
    new M("Quantity", "Units", "string"),

    new M("Currency", "Amount", "Single?"),
    new M("Currency", "Units", "string") { Path = "currency" },
    
    new M("DateTimeRange", "Start", "DateTime?"),
    new M("DateTimeRange", "End", "DateTime?"),

    new M("MusicSong", "Album", "MusicAlbum", isArray: true),
    new M("MusicSong", "Musician", "Profile", isArray: true),
    new M("MusicSong", "Preview", "GraphAudio", isArray: true) { Path = "preview_url" },
    new M("MusicSong", "Duration", "Int32?"),
    new M("MusicSong", "ISRC", "string") { Path = "isrc", SummaryName = "ISRC" },
    new M("MusicSong", "ReleaseDate", "DateTime?"),
    new M("MusicSong", "ReleaseType", "string"),
    new M("MusicSong", "Disc", "Int32?"),
    new M("MusicSong", "Track", "Int32?"),

    new M("MusicAlbum", "Song", "MusicSong", isArray: true),
    new M("MusicAlbum", "Musician", "Profile", isArray: true),
    new M("MusicAlbum", "ReleaseDate", "DateTime?"),
    new M("MusicAlbum", "ReleaseType", "string"),
    new M("MusicAlbum", "Disc", "Int32?"),
    new M("MusicAlbum", "Track", "Int32?"),

    new M("MusicPlaylist", "Creator", "Profile", isArray: true),
    new M("MusicPlaylist", "Song", "MusicSong", isArray: true),
    new M("MusicPlaylist", "SongCount", "Int32?"),

    new M("MusicRadioStation", "Creator", "Profile", isArray: true),

    new M("VideoObject", "Actor", "Profile", isArray: true),
    new M("VideoObject", "Director", "Profile", isArray: true),
    new M("VideoObject", "Writer", "Profile", isArray: true),
    new M("VideoObject", "Tag", "string", isArray: true),
    new M("VideoObject", "Duration", "Int32?"),
    new M("VideoObject", "ReleaseDate", "DateTime?"),

    new M("VideoEpisode", "Series", "VideoTVShow", isArray: true) { Plural = "AllSeries", SummaryPlural = "all series" },

    new M("Article", "Author", "Profile", isArray: true),
    new M("Article", "Publisher", "Profile", isArray: true),
    new M("Article", "Tag", "string", isArray: true),
    new M("Profile", "ContentTier", "string"),
    new M("Article", "PublishedTime", "DateTime?"),
    new M("Article", "ModifiedTime", "DateTime?"),
    new M("Article", "ExpirationTime", "DateTime?"),
    new M("Article", "Section", "string"),

    new M("Book", "Author", "Profile", isArray: true),
    new M("Book", "Genre", "BookGenre", isArray: true),
    new M("Book", "AlternateLanguage", "string", isArray: true) { Path = "language:alternate" },
    new M("Book", "Tag", "string", isArray: true),
    new M("Book", "InitialReleaseDate", "DateTime?"),
    new M("Book", "ISBN", "string") { Path = "isbn", SummaryName = "ISBN" },
    new M("Book", "Language", "string"),
    new M("Book", "PageCount", "Int32?"),
    new M("Book", "RatingValue", "Single?") { Path = "rating:value" },
    new M("Book", "RatingScale", "Int32?") { Path = "rating:scale" },
    new M("Book", "ReleaseDate", "DateTime?"),
    new M("Book", "Sample", "string"),
    
    new M("BookGenre", "CanonicalName", "string"),
    
    new M("Profile", "Book", "Book", isArray: true),
    new M("Profile", "Genre", "string", isArray: true),
    new M("Profile", "FirstName", "string"),
    new M("Profile", "LastName", "string"),
    new M("Profile", "UserName", "string") { Path = "username" },
    new M("Profile", "Gender", "string"),
    new M("Profile", "OfficialSite", "string"),
    new M("Profile", "Role", "string"),
    
    new M("AndroidApplink", "Package", "string"),
    new M("AndroidApplink", "AppName", "string"),
    new M("AndroidApplink", "Class", "string"),
    
    new M("IosApplink", "AppStoreId", "Int32?"),
    new M("IosApplink", "AppName", "string"),
    
    new M("Weblink", "ShouldFallback", "Boolean?"),
    
    new M("WindowsApplink", "PackageFamilyName", "string"),
    new M("WindowsApplink", "AppId", "string"),
    new M("WindowsApplink", "AppName", "string"),

    new M("Business", "ContactData", "ContactData", isArray: true),
    new M("Business", "Hour", "BusinessHour", isArray: true),

    new M("BusinessHour", "Day", "string"),
    new M("BusinessHour", "Start", "string"),
    new M("BusinessHour", "End", "string"),
    
    new M("FitnessCourse", "Calories", "Int32?"),
    new M("FitnessCourse", "CustomUnitEnergy", "Quantity"),
    new M("FitnessCourse", "Distance", "Quantity"),
    new M("FitnessCourse", "Duration", "Quantity"),
    new M("FitnessCourse", "LiveText", "string"),
    new M("FitnessCourse", "Metric", "FitnessActivityDataPoint", isArray: true),
    new M("FitnessCourse", "Pace", "Quantity"),
    new M("FitnessCourse", "Speed", "Quantity"),
    new M("FitnessCourse", "Split", "FitnessSplits", isArray: true),
    new M("FitnessCourse", "Steps", "Int32?") { IsDeprecated = true },
    
    new M("FitnessActivityDataPoint", "Calories", "Int32?"),
    new M("FitnessActivityDataPoint", "CustomUnitEnergy", "Quantity"),
    new M("FitnessActivityDataPoint", "Distance", "Quantity"),
    new M("FitnessActivityDataPoint", "Location", "GeoPoint"),
    new M("FitnessActivityDataPoint", "Steps", "Int32?"),
    new M("FitnessActivityDataPoint", "Speed", "Quantity"),
    new M("FitnessActivityDataPoint", "Timestamp", "DateTime?"),
    new M("FitnessActivityDataPoint", "Pace", "Quantity"),
    
    new M("FitnessSplits", "Unit", "string"),
    new M("FitnessSplits", "Value", "Quantity", isArray: true),
    
    new M("GameAchievement", "Points", "Int32?"),
    new M("GameAchievement", "Secret", "Boolean?"),
    
    new M("Product", "AgeGroup", "string"),
    new M("Product", "Availability", "string"),
    new M("Product", "Brand", "string"),
    new M("Product", "Category", "string"),
    new M("Product", "Color", "string"),
    new M("Product", "Condition", "string"),
    new M("Product", "EAN", "string") { Path = "ean" },
    new M("Product", "ExpirationTime", "DateTime?"),
    new M("Product", "IsProductShareable", "Boolean?"),
    new M("Product", "ISBN", "string") { Path = "isbn" },
    new M("Product", "Material", "string"),
    new M("Product", "ManufacturerPartNo", "string") { Path = "mfr_part_no" },
    new M("Product", "OriginalPrice", "Currency", isArray: true),
    new M("Product", "Pattern", "string"),
    new M("Product", "PluralTitle", "string"),
    new M("Product", "PretaxPrice", "Currency", isArray: true),
    new M("Product", "Price", "Currency", isArray: true),
    new M("Product", "ProductLink", "string"),
    new M("Product", "PurchaseLimit", "Int64?"),
    new M("Product", "Retailer", "Profile"),
    new M("Product", "RetailerCategory", "string"),
    new M("Product", "RetailerPartNo", "string"),
    new M("Product", "RetailerTitle", "string"),
    new M("Product", "RetailerGroupId", "string"),
    new M("Product", "RetailerItemId", "string"),
    new M("Product", "SalePrice", "Currency"),
    new M("Product", "SalePriceDates", "Currency") { Plural = "AllSalePriceDates" },
    new M("Product", "ShippingCost", "Currency", isArray: true),
    new M("Product", "ShippingWeight", "Quantity"),
    new M("Product", "Size", "string"),
    new M("Product", "TargetGender", "string"),
    new M("Product", "UniversalProductCode", "string") { Path = "upc" },
    new M("Product", "Weight", "Quantity"),
    new M("Product", "Group", "ProductGroup") { Path = "group_ref" },
    new M("Product", "GTIN", "string") { Path = "gtin" },
    
    new M("ProductGroup", "RetailerGroupId", "string"),
    
    new M("RestaurantMenu", "Restaurant", "Business"),
    new M("RestaurantMenu", "Section", "RestaurantMenuSection", isArray: true),
    
    new M("RestaurantMenuSection", "Menu", "RestaurantMenu"),
    new M("RestaurantMenuSection", "Item", "RestaurantMenuItem", isArray: true),
    
    new M("RestaurantMenuItem", "Section", "RestaurantMenuSection"),
    new M("RestaurantMenuItem", "Variation", "RestaurantMenuVariation", isArray: true),
    
    new M("RestaurantMenuVariation", "Price", "Currency"),
    new M("RestaurantMenuVariation", "Name", "string"),
};

var objectTypes = new []
{
    "MusicSong", "MusicAlbum", "MusicPlaylist", "MusicRadioStation",
    "VideoMovie", "VideoEpisode", "VideoTVShow", "VideoOther",
    "Article", "Book", "BookGenre", "Profile"
};

foreach (var g in properties.GroupBy(p => p.Class))
{
    var C = g.Key;

#>
    partial class <#= C #>
    {
<#
    foreach (var p in g)
    {
        var N = p.Name;
        var PL = p.Plural ?? (N + 's');
        var T = p.Type;
        var PN = p.Path;
        var pathExpression = p.IsAbsolute ? p.GetPropertyPath() : $"\"{p.Path}\"";
        var CT = $"{(T == "string" ? "PropertyEntryPartialCollection" : $"GraphObjectPartialCollection<{T}>")}(this, {pathExpression})";
#>
        #region <#= N #>

<#
        
        if (p.IsLocalValue)
        {
#>
        /// <summary>
        /// Gets or sets <#= p.SummaryName #>.
        /// </summary>
        [DefaultValue(null)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
<#
            if (p.IsDeprecated)
            {
#>
        [Obsolete("Deprecated in Open Graph Protocol")]
<#
            }
        #>
        public <#= T #> <#= N #>
        {
            get => GetLocalProperty<#= T == "string" ? "" : $"As{T.TrimEnd('?')}" #>(<#= pathExpression #>);
            set => SetLocalProperty(<#= pathExpression #>, value);
        }
<#
            if (p.IsArray)
            {
#>

        /// <summary>
        /// Gets or sets a list of <#= p.SummaryPlural #>.
        /// </summary>
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
<#
                if (p.IsDeprecated)
                {
#>
        [Obsolete("Deprecated in Open Graph Protocol")]
<#
                }
        #>
        public IList<<#= T #>> <#= PL #>
        {
            get => new <#= CT #>;
            set => SetLocalProperty("<#= PN #>", value);
        }
<#
            }
        }
        else
        {
#>
        /// <summary>
        /// Gets or sets <#= p.SummaryName #>.
        /// </summary>
        [DefaultValue(null)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
<#
            if (p.IsDeprecated)
            {
#>
        [Obsolete("Deprecated in Open Graph Protocol")]
<#
            }
        #>
        public <#= T #> <#= N #>
        {
            get => <#= PL #>.FirstOrDefault();
            set => <#= PL #>.Set(value);
        }

        /// <summary>
        /// Gets or sets a list of <#= p.SummaryPlural #>.
        /// </summary>
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
<#
            if (p.IsDeprecated)
            {
#>
        [Obsolete("Deprecated in Open Graph Protocol")]
<#
            }
        #>
        public IList<<#= T #>> <#= PL #>
        {
            get => new <#= CT #>;
            set => <#= PL #>.Set(value);
        }
<#
        }
#>

        #endregion <#= N #>

<#
    }

    var children = g.Where(p => !p.IsLocalValue).ToArray();

    if (children.Any())
    {
        var isBase = C == "GraphObject";
#>
        /// <inheritdoc />
        internal <#= isBase ? "virtual" : "override" #> GraphObject CreateNewChild(PropertyPath property, out bool matched)
        {
<#
        foreach (var p in children)
        {
            if (p.IsAbsolute)
            {
#>
            {
                var p = <#= p.GetPropertyPath() #>;
                matched = property == p;
                if (matched || property.StartsWith(p))
                {
                    return new <#= p.Type #>(p);
                }
            }
<#
            }
            else
            {
#>
            if (property.StartsWith(Path, "<#= p.Path #>", out matched, skipCompareProperty: true))
            {
                return new <#= p.Type #>(Path + "<#= p.Path #>");
            }
<#
            }
        }
#>
            return <#= isBase ? "null" : "base.CreateNewChild(property, out matched)" #>;
        }
<#
    }
#>
    }
<#
}
#>
}<#+
public class M
{
    private string _Path;
    private string _Plural;
    private string _SummaryName;
    private string _SummaryPlural;

    public M(string c, string n, string t, bool isArray = false)
    {
        Class = c;
        Name = n;
        Type = t;
        IsArray = isArray;
    }

    public string Class { get; set; }
    public string Name { get; set; }
    public string Type { get; set; }
    public bool IsArray { get; set; }
    public bool IsAbsolute { get; set; }
    public bool IsDeprecated { get; set; }

    public bool IsLocalValue
    {
        get
        {
            switch (Type)
            {
                case "string":
                case "Boolean?":
                case "Int32?":
                case "Int64?":
                case "Single?":
                case "DateTime?":
                    return true;
            }
            return false;
        }
    }
    
    public string Path
    {
        get
        {
            if (_Path != null)
            {
                return _Path;
            }
            var sb = new StringBuilder(Name);

            for (var i = 0; i < sb.Length; i++)
            {
                var c = sb[i];
                if ('A' <= c && c <= 'Z')
                {
                    if (i > 0)
                    {
                        sb[i] = '_';
                        sb.Insert(++i, char.ToLower(c));
                    }
                    else
                    {
                        sb[i] = char.ToLower(c);
                    }
                }
            }

            return sb.ToString();
        }
        set => _Path = value;
    }

    public string GetPropertyPath()
    {
        var sb = new StringBuilder("new PropertyPath(");
        
        if (IsAbsolute)
        {
            sb.Append("NamespaceCollection.");
            var rest = Path.Substring(0, Path.IndexOf(':'));
            switch (rest)
            {
                case "fb":
                    sb.Append("Facebook");
                    break;

                case "al":
                    sb.Append("Applink");
                    break;
                    
                default:
                    sb.Append(char.ToUpper(rest[0]) + rest.Substring(1));
                    break;
            }
        }
        else
        {
            sb.Append("null");
        }
        
        sb.Append(", \"");
        
        if (IsAbsolute)
        {
            sb.Append(Path.Substring(Path.IndexOf(':') + 1));
        }
        else
        {
            sb.Append(Path);
        }

        sb.Append("\")");

        return sb.ToString();
    }

    public string Plural
    {
        get => _Plural ?? $"{Name}s";
        set => _Plural = value;
    }
    public string SummaryName
    {
        get
        {
            if (_SummaryName != null)
            {
                return _SummaryName;
            }
            var sb = new StringBuilder(Name);

            for (var i = 0; i < sb.Length; i++)
            {
                var c = sb[i];
                if ('A' <= c && c <= 'Z')
                {
                    if (i > 0)
                    {
                        sb[i] = ' ';
                        sb.Insert(++i, char.ToLower(c));
                    }
                    else
                    {
                        sb[i] = char.ToLower(c);
                    }
                }
            }

            var fc = sb[0];

            if (fc == 'a' || fc == 'e' || fc == 'i' || fc == 'o' || fc == 'u')
            {
                sb.Insert(0, "an ");
            }
            else
            {
                sb.Insert(0, "a ");
            }

            return sb.ToString();
        }
        set => _SummaryName = value;
    }
    public string SummaryPlural
    {
        get
        {
            if (_SummaryPlural != null)
            {
                return _SummaryPlural;
            }
            var sb = new StringBuilder(Plural);

            for (var i = 0; i < sb.Length; i++)
            {
                var c = sb[i];
                if ('A' <= c && c <= 'Z')
                {
                    if (i > 0)
                    {
                        sb[i] = ' ';
                        sb.Insert(++i, char.ToLower(c));
                    }
                    else
                    {
                        sb[i] = char.ToLower(c);
                    }
                }
            }
            
            sb.Insert(0, "all ");

            return sb.ToString();
        }
        set => _SummaryPlural = value;
    }
}
#>