<#@ template language="C#" debug="True" #>
<#@ assembly name="System.Core.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ output extension="cs" #>
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;

namespace Shipwreck.OpenGraph
{
<#

var properties = new []
{
    new M("GraphObject", "AlternateLocale", "string") { Property = "locale:alternate" },
    new M("GraphObject", "Image", "GraphImage"),
    new M("GraphObject", "Video", "GraphVideo"),
    new M("GraphObject", "Audio", "GraphAudio"),
    
    new M("MusicSong", "Album", "MusicAlbum"),
    new M("MusicSong", "Musician", "Profile"),
    
    new M("MusicAlbum", "Song", "MusicSong"),
    new M("MusicAlbum", "Musician", "Profile"),
    
    new M("MusicPlaylist", "Song", "MusicSong"),
    new M("MusicPlaylist", "Creator", "Profile"),
    
    new M("MusicRadioStation", "Creator", "Profile"),
    
    new M("VideoObject", "Actor", "Profile"),
    new M("VideoObject", "Director", "Profile"),
    new M("VideoObject", "Writer", "Profile"),
    new M("VideoObject", "Tag", "string"),
    
    new M("VideoEpisode", "Series", "VideoTVShow") { Plural = "AllSeries" },
    
    new M("Article", "Author", "Profile"),
    new M("Article", "Tag", "string"),
    
    new M("Book", "Author", "Profile"),
    new M("Book", "Tag", "string"),
};

var singleProperties = new []
{
    new M("GraphObject", "Title", "string"),
    new M("GraphObject", "Type", "string"),
    new M("GraphObject", "Url", "string"),
    new M("GraphObject", "Description", "string"),
    new M("GraphObject", "Determiner", "string"),
    new M("GraphObject", "Locale", "string"),
    new M("GraphObject", "SiteName", "string"),
    
    new M("GraphAudio", "SecureUrl", "string"),
    
    new M("GraphImage", "SecureUrl", "string"),
    new M("GraphImage", "Width", "Int32?"),
    new M("GraphImage", "Height", "Int32?"),
    new M("GraphImage", "Alt", "string"),

    new M("GraphVideo", "SecureUrl", "string"),
    new M("GraphVideo", "Width", "Int32?"),
    new M("GraphVideo", "Height", "Int32?"),
    new M("GraphVideo", "Alt", "string"),

    new M("MusicSong", "Duration", "Int32?"),
    new M("MusicSong", "Disc", "Int32?"),
    new M("MusicSong", "Track", "Int32?"),

    new M("MusicAlbum", "ReleaseDate", "DateTime?"),
    new M("MusicAlbum", "Disc", "Int32?"),
    new M("MusicAlbum", "Track", "Int32?"),

    new M("VideoObject", "Duration", "Int32?"),
    new M("VideoObject", "ReleaseDate", "DateTime?"),

    new M("Article", "PublishedTime", "DateTime?"),
    new M("Article", "ModifiedTime", "DateTime?"),
    new M("Article", "ExpirationTime", "DateTime?"),
    new M("Article", "Section", "string"),

    new M("Book", "ISBN", "string") { Property = "isbn" },
    new M("Book", "ReleaseDate", "DateTime?"),

    new M("Profile", "FirstName", "string"),
    new M("Profile", "LastName", "string"),
    new M("Profile", "UserName", "string") { Property = "username" },
    new M("Profile", "Gender", "string"),
    new M("Profile", "Role", "string"),
};

foreach (var C in properties.Select(p => p.Class).Concat(singleProperties.Select(p => p.Class)).Distinct())
{

#>
    partial class <#= C #>
    {
<#
    foreach (var p in singleProperties.Where(e => e.Class == C))
    {
        var N = p.Name;
        var T = p.Type;
        var PN = p.Property;
#>
        [DefaultValue(null)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public <#= T #> <#= N #>
        {
            get => GetLocalProperty<#= T == "string" ? "" : $"As{T.TrimEnd('?')}" #>("<#= PN #>");
            set => SetLocalProperty("<#= PN #>", value);
        }

<#
    }

    var props = properties.Where(e => e.Class == C);
    foreach (var p in props)
    {
        var N = p.Name;
        var PL = p.Plural ?? (N + 's');
        var T = p.Type;
        var PN = p.Property;
        var CT = T == "string" ? "GraphObjectPropertyCollection" : $"GraphObjectChildCollection<{T}>";
#>
#region <#= N #>

<#
        if (T == "string")
        {
#>
        [DefaultValue(null)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public <#= T #> <#= N #>
        {
            get => GetLocalProperty("<#= PN #>");
            set => SetLocalProperty("<#= PN #>", value);
        }
<#
        }
        else
        {
#>
        [DefaultValue(null)]
#if !NETSTANDARD1_3
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
#endif
        public <#= T #> <#= N #>
        {
            get => <#= PL #>?.FirstOrDefault();
        }
<#
        }
#>

        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public IList<<#= T #>> <#= PL #>
        {
            get => new <#= CT #>(this, "<#= PN #>");
        }

#endregion <#= N #>

<#
    }


    var children = props.Where(p => p.Type != "string").ToArray();

    if (children.Any() && C != "GraphObject")
    {
#>
        /// <inheritdoc />
        internal override GraphObject CreateNewChild(string property, out bool matched)
        {
<#
        foreach (var p in children)
        {
#>
            if (property.StartsWithChildPath(Path, "<#= p.Property #>", out matched))
            {
                return new <#= p.Type #>(Path + ":<#= p.Property #>");
            }
<#
        }
#>
            return base.CreateNewChild(property, out matched);
        }
<#
    }
#>
    }
<#
}
#>
    partial class Graph
    {
<#

var objectTypes = new []
{
    "MusicSong", "MusicAlbum", "MusicPlaylist", "MusicRadioStation",
    "VideoMovie", "VideoEpisode", "VideoTVShow", "VideoOther",
    "Article", "Book", "Profile"
};

foreach (var T in objectTypes)
{
#>
        [DefaultValue(null)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public <#= T #> <#= T #>
        {
            get => _TypeObject as <#= T #>;
            set => _TypeObject = value ?? (_TypeObject is <#= T #> ? null : _TypeObject);
        }

<#
}

#>
    }
}<#+
public class M
{
    private string _Property;
    private string _Plural;

    public M(string c, string n, string t)
    {
        Class = c;
        Name = n;
        Type = t;
    }

    public string Class { get; set; }
    public string Name { get; set; }
    public string Type { get; set; }
    
    public string Property
    {
        get
        {
            if (_Property != null)
            {
                return _Property;
            }
            var sb = new StringBuilder(Name);

            for (var i = 0; i < sb.Length; i++)
            {
                var c = sb[i];
                if ('A' <= c && c <= 'Z')
                {
                    if (i > 0)
                    {
                        sb[i] = '_';
                        sb.Insert(++i, char.ToLower(c));
                    }
                    else
                    {
                        sb[i] = char.ToLower(c);
                    }
                }
            }

            return sb.ToString();
        }
        set => _Property = value;
    }
    public string Plural
    {
        get => _Plural ?? $"{Name}s";
        set => _Plural = value;
    }
}
#>