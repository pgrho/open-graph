<#@ template language="C#" debug="True" #>
<#@ assembly name="System.Core.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ output extension="cs" #>
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;

namespace Shipwreck.OpenGraph
{
<#

var properties = new []
{
    new M("GraphObject", "AlternateLocale", "string", isArray: true) { Path = "locale:alternate" },
    new M("GraphObject", "Image", "GraphImage", isArray: true),
    new M("GraphObject", "Video", "GraphVideo", isArray: true),
    new M("GraphObject", "Audio", "GraphAudio", isArray: true),
    new M("GraphObject", "Restriction", "GraphRestriction", isArray: true) { Path = "restrictions" },
    new M("GraphObject", "SeeAlso", "string", isArray: true),
    new M("GraphObject", "Title", "string"),
    new M("GraphObject", "Type", "string"),
    new M("GraphObject", "Url", "string"),
    new M("GraphObject", "Description", "string"),
    new M("GraphObject", "Determiner", "string"),
    new M("GraphObject", "Locale", "string"),
    new M("GraphObject", "RichAttachment", "Boolean?"),
    new M("GraphObject", "SiteName", "string"),
    new M("GraphObject", "TimeToLive", "Int32?") { Path = "ttl" },
    new M("GraphObject", "UpdatedTime", "DateTime?"),
    
    new M("Graph", "AndroidApp", "AndroidApplink", isArray: true) { Path = "al:android", OverridesPath = true },
    new M("Graph", "IosApp", "IosApplink", isArray: true) { Path = "al:ios", OverridesPath = true },
    new M("Graph", "IPadApp", "IosApplink", isArray: true) { Path = "al:ipad", OverridesPath = true },
    new M("Graph", "IPhoneApp", "IosApplink", isArray: true) { Path = "al:iphone", OverridesPath = true },
    new M("Graph", "WebApp", "Weblink", isArray: true) { Path = "al:web", OverridesPath = true },
    new M("Graph", "WindowsApp", "WindowsApplink", isArray: true) { Path = "al:windows", OverridesPath = true },
    new M("Graph", "WindowsPhoneApp", "WindowsApplink", isArray: true) { Path = "al:windows_phone", OverridesPath = true },
    new M("Graph", "WindowsUniversalApp", "WindowsApplink", isArray: true) { Path = "al:windows_universal", OverridesPath = true },

    new M("GraphAudio", "SecureUrl", "string"),

    new M("GraphImage", "SecureUrl", "string"),
    new M("GraphImage", "Width", "Int32?"),
    new M("GraphImage", "Height", "Int32?"),
    new M("GraphImage", "Alt", "string"),
    new M("GraphImage", "UserGenerated", "Boolean?"),

    new M("GraphVideo", "SecureUrl", "string"),
    new M("GraphVideo", "Width", "Int32?"),
    new M("GraphVideo", "Height", "Int32?"),
    new M("GraphVideo", "Alt", "string"),

    new M("GraphRestriction", "AllowedContry", "string", isArray: true) { Plural = "AllowedCountries", Path = "country:allowed" },
    new M("GraphRestriction", "DisallowedContry", "string", isArray: true) { Plural = "DisallowedCountries", Path = "country:disallowed" },
    new M("GraphRestriction", "Age", "string"),
    new M("GraphRestriction", "Content", "string", isArray: true),

    new M("MusicSong", "Album", "MusicAlbum", isArray: true),
    new M("MusicSong", "Musician", "Profile", isArray: true),
    new M("MusicSong", "Preview", "GraphAudio", isArray: true) { Path = "preview_url" },
    new M("MusicSong", "Duration", "Int32?"),
    new M("MusicSong", "ISRC", "string") { Path = "isrc", SummaryName = "ISRC" },
    new M("MusicSong", "ReleaseDate", "DateTime?"),
    new M("MusicSong", "ReleaseType", "string"),
    new M("MusicSong", "Disc", "Int32?"),
    new M("MusicSong", "Track", "Int32?"),

    new M("MusicAlbum", "Song", "MusicSong", isArray: true),
    new M("MusicAlbum", "Musician", "Profile", isArray: true),
    new M("MusicAlbum", "ReleaseDate", "DateTime?"),
    new M("MusicAlbum", "ReleaseType", "string"),
    new M("MusicAlbum", "Disc", "Int32?"),
    new M("MusicAlbum", "Track", "Int32?"),

    new M("MusicPlaylist", "Creator", "Profile", isArray: true),
    new M("MusicPlaylist", "Song", "MusicSong", isArray: true),
    new M("MusicPlaylist", "SongCount", "Int32?"),

    new M("MusicRadioStation", "Creator", "Profile", isArray: true),

    new M("VideoObject", "Actor", "Profile", isArray: true),
    new M("VideoObject", "Director", "Profile", isArray: true),
    new M("VideoObject", "Writer", "Profile", isArray: true),
    new M("VideoObject", "Tag", "string", isArray: true),
    new M("VideoObject", "Duration", "Int32?"),
    new M("VideoObject", "ReleaseDate", "DateTime?"),

    new M("VideoEpisode", "Series", "VideoTVShow", isArray: true) { Plural = "AllSeries", SummaryPlural = "all series" },

    new M("Article", "Author", "Profile", isArray: true),
    new M("Article", "Publisher", "Profile", isArray: true),
    new M("Article", "Tag", "string", isArray: true),
    new M("Profile", "ContentTier", "string"),
    new M("Article", "PublishedTime", "DateTime?"),
    new M("Article", "ModifiedTime", "DateTime?"),
    new M("Article", "ExpirationTime", "DateTime?"),
    new M("Article", "Section", "string"),

    new M("Book", "Author", "Profile", isArray: true),
    new M("Book", "Genre", "BookGenre", isArray: true),
    new M("Book", "AlternateLanguage", "string", isArray: true) { Path = "language:alternate" },
    new M("Book", "Tag", "string", isArray: true),
    new M("Book", "InitialReleaseDate", "DateTime?"),
    new M("Book", "ISBN", "string") { Path = "isbn", SummaryName = "ISBN" },
    new M("Book", "Language", "string"),
    new M("Book", "PageCount", "Int32?"),
    new M("Book", "RatingValue", "Single?") { Path = "rating:value" },
    new M("Book", "RatingScale", "Int32?") { Path = "rating:scale" },
    new M("Book", "ReleaseDate", "DateTime?"),
    new M("Book", "Sample", "string"),
    
    new M("BookGenre", "CanonicalName", "string"),
    
    new M("Profile", "Book", "Book", isArray: true),
    new M("Profile", "Genre", "string", isArray: true),
    new M("Profile", "FirstName", "string"),
    new M("Profile", "LastName", "string"),
    new M("Profile", "UserName", "string") { Path = "username" },
    new M("Profile", "Gender", "string"),
    new M("Profile", "OfficialSite", "string"),
    new M("Profile", "Role", "string"),
    
    new M("AndroidApplink", "Package", "string"),
    new M("AndroidApplink", "AppName", "string"),
    new M("AndroidApplink", "Class", "string"),
    
    new M("IosApplink", "AppStoreId", "Int32?"),
    new M("IosApplink", "AppName", "string"),
    
    new M("Weblink", "ShouldFallback", "Boolean?"),
    
    new M("WindowsApplink", "PackageFamilyName", "string"),
    new M("WindowsApplink", "AppId", "string"),
    new M("WindowsApplink", "AppName", "string"),
};

foreach (var g in properties.GroupBy(p => p.Class))
{
    var C = g.Key;

#>
    partial class <#= C #>
    {
<#
    foreach (var p in g.Where(e => !e.IsArray))
    {
        var N = p.Name;
        var T = p.Type;
        var PN = p.Path;
#>
        /// <summary>
        /// Gets or sets <#= p.SummaryName #>.
        /// </summary>
        [DefaultValue(null)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public <#= T #> <#= N #>
        {
            get => GetLocalProperty<#= T == "string" ? "" : $"As{T.TrimEnd('?')}" #>("<#= PN #>");
            set => SetLocalProperty("<#= PN #>", value);
        }

<#
    }

    foreach (var p in g.Where(e => e.IsArray))
    {
        var N = p.Name;
        var PL = p.Plural ?? (N + 's');
        var T = p.Type;
        var PN = p.Path;
        var CT = T == "string" ? "GraphObjectPropertyCollection" : p.OverridesPath ?  $"GraphChildCollection<{T}>" : $"GraphObjectChildCollection<{T}>";
#>
        #region <#= N #>

<#
        if (T == "string")
        {
#>
        /// <summary>
        /// Gets or sets <#= p.SummaryName #>.
        /// </summary>
        [DefaultValue(null)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public <#= T #> <#= N #>
        {
            get => GetLocalProperty("<#= PN #>");
            set => SetLocalProperty("<#= PN #>", value);
        }

        /// <summary>
        /// Gets or sets a list of <#= p.SummaryPlural #>.
        /// </summary>
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public IList<<#= T #>> <#= PL #>
        {
            get => new <#= CT #>(this, "<#= PN #>");
            set => SetLocalProperty("<#= PN #>", value);
        }
<#
        }
        else
        {
#>
        /// <summary>
        /// Gets or sets <#= p.SummaryName #>.
        /// </summary>
        [DefaultValue(null)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public <#= T #> <#= N #>
        {
            get => <#= PL #>.FirstOrDefault();
            set => <#= PL #>.Set(value);
        }

        /// <summary>
        /// Gets or sets a list of <#= p.SummaryPlural #>.
        /// </summary>
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public IList<<#= T #>> <#= PL #>
        {
            get => new <#= CT #>(this, "<#= PN #>");
            set => <#= PL #>.Set(value);
        }
<#
        }
#>

        #endregion <#= N #>

<#
    }

    var children = g.Where(p => p.IsArray && p.Type != "string").ToArray();

    if (children.Any())
    {
        var isBase = C == "GraphObject";
#>
        /// <inheritdoc />
        internal <#= isBase ? "virtual" : "override" #> GraphObject CreateNewChild(string property, out bool matched)
        {
<#
        foreach (var p in children)
        {
            if (p.OverridesPath)
            {
#>
            matched = property == "<#= p.Path #>";
            if (matched || property.StartsWith(":<#= p.Path #>"))
            {
                return new <#= p.Type #>("<#= p.Path #>");
            }
<#
            }
            else
            {
#>
            if (property.StartsWithChildPath(Path, "<#= p.Path #>", out matched))
            {
                return new <#= p.Type #>(Path + ":<#= p.Path #>");
            }
<#
            }
        }
#>
            return <#= isBase ? "null" : "base.CreateNewChild(property, out matched)" #>;
        }
<#
    }
#>
    }
<#
}
#>
    partial class Graph
    {
<#

var objectTypes = new []
{
    "MusicSong", "MusicAlbum", "MusicPlaylist", "MusicRadioStation",
    "VideoMovie", "VideoEpisode", "VideoTVShow", "VideoOther",
    "Article", "Book", "BookGenre", "Profile"
};

foreach (var T in objectTypes)
{
#>
        /// <summary>
        /// Gets or sets a value of <see cref="TypeObject" /> as <see cref="OpenGraph.<#= T #>" />.
        /// </summary>
        [DefaultValue(null)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public <#= T #> <#= T #>
        {
            get => _TypeObject as <#= T #>;
            set => TypeObject = value ?? (_TypeObject is <#= T #> ? null : _TypeObject);
        }

<#
}

#>
    }
}<#+
public class M
{
    private string _Path;
    private string _Plural;
    private string _SummaryName;
    private string _SummaryPlural;

    public M(string c, string n, string t, bool isArray = false)
    {
        Class = c;
        Name = n;
        Type = t;
        IsArray = isArray;
    }

    public string Class { get; set; }
    public string Name { get; set; }
    public string Type { get; set; }
    public bool IsArray { get; set; }
    public bool OverridesPath { get; set; }
    
    public string Path
    {
        get
        {
            if (_Path != null)
            {
                return _Path;
            }
            var sb = new StringBuilder(Name);

            for (var i = 0; i < sb.Length; i++)
            {
                var c = sb[i];
                if ('A' <= c && c <= 'Z')
                {
                    if (i > 0)
                    {
                        sb[i] = '_';
                        sb.Insert(++i, char.ToLower(c));
                    }
                    else
                    {
                        sb[i] = char.ToLower(c);
                    }
                }
            }

            return sb.ToString();
        }
        set => _Path = value;
    }
    public string Plural
    {
        get => _Plural ?? $"{Name}s";
        set => _Plural = value;
    }
    public string SummaryName
    {
        get
        {
            if (_SummaryName != null)
            {
                return _SummaryName;
            }
            var sb = new StringBuilder(Name);

            for (var i = 0; i < sb.Length; i++)
            {
                var c = sb[i];
                if ('A' <= c && c <= 'Z')
                {
                    if (i > 0)
                    {
                        sb[i] = ' ';
                        sb.Insert(++i, char.ToLower(c));
                    }
                    else
                    {
                        sb[i] = char.ToLower(c);
                    }
                }
            }

            var fc = sb[0];

            if (fc == 'a' || fc == 'e' || fc == 'i' || fc == 'o' || fc == 'u')
            {
                sb.Insert(0, "an ");
            }
            else
            {
                sb.Insert(0, "a ");
            }

            return sb.ToString();
        }
        set => _SummaryName = value;
    }
    public string SummaryPlural
    {
        get
        {
            if (_SummaryPlural != null)
            {
                return _SummaryPlural;
            }
            var sb = new StringBuilder(Plural);

            for (var i = 0; i < sb.Length; i++)
            {
                var c = sb[i];
                if ('A' <= c && c <= 'Z')
                {
                    if (i > 0)
                    {
                        sb[i] = ' ';
                        sb.Insert(++i, char.ToLower(c));
                    }
                    else
                    {
                        sb[i] = char.ToLower(c);
                    }
                }
            }
            
            sb.Insert(0, "all ");

            return sb.ToString();
        }
        set => _SummaryPlural = value;
    }
}
#>