<#@ template language="C#" debug="True" #>
<#@ assembly name="System.Core.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ output extension="cs" #>
<#

var properties = new []
{
    new { Class = "GraphObject", Name = "AlternateLocale", Plural = (string)null, Type = typeof(string).FullName },
    new { Class = "GraphObject", Name = "Image", Plural = (string)null, Type = "GraphImage" },
    new { Class = "GraphObject", Name = "Video", Plural = (string)null, Type = "GraphVideo" },
    new { Class = "GraphObject", Name = "Audio", Plural = (string)null, Type = "GraphAudio" },
    
    new { Class = "MusicSong", Name = "Album", Plural = (string)null, Type = "MusicSongAlbum" },
    new { Class = "MusicSong", Name = "Musician", Plural = (string)null, Type = "Profile" },
    
    new { Class = "MusicAlbum", Name = "Song", Plural = (string)null, Type = "MusicAlbumSong" },
    new { Class = "MusicAlbum", Name = "Musician", Plural = (string)null, Type = "Profile" },
    
    new { Class = "MusicPlaylist", Name = "Song", Plural = (string)null, Type = "MusicAlbumSong" },
    
    new { Class = "VideoObject", Name = "Actor", Plural = (string)null, Type = "Actor" },
    new { Class = "VideoObject", Name = "Director", Plural = (string)null, Type = "Profile" },
    new { Class = "VideoObject", Name = "Writer", Plural = (string)null, Type = "Profile" },
    new { Class = "VideoObject", Name = "Tag", Plural = (string)null, Type = typeof(string).FullName },
    
    new { Class = "Article", Name = "Author", Plural = (string)null, Type = "Profile" },
    new { Class = "Article", Name = "Tag", Plural = (string)null, Type = typeof(string).FullName },
    
    new { Class = "Book", Name = "Author", Plural = (string)null, Type = "Profile" },
    new { Class = "Book", Name = "Tag", Plural = (string)null, Type = typeof(string).FullName },
    
};

#>
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;

namespace Shipwreck.OpenGraph
{
<#

foreach (var g in properties.GroupBy(p => p.Class))
{

#>
    partial class <#= g.Key #>
    {
<#

    foreach (var p in g)
    {
        var type = Type.GetType(p.Type);
        var N = p.Name;
        var PL = p.Plural ?? (N + 's');
        var T = p.Type;
        var isMscorlib = type?.Assembly == typeof(int).Assembly;
#>
#region <#= N #>

        private Collection<<#= T #>> _<#= PL #>;
        
        public <#= T #> <#= N #>
        {
            get => _<#= PL #>?.FirstOrDefault() ?? default(<#= T #>);
            set => CollectionHelper.SetCollection(ref _<#= PL #>, value);
        }

        public Collection<<#= T #>> <#= PL #>
        {
            get => CollectionHelper.GetCollection(ref _<#= PL #>);
            set => CollectionHelper.SetCollection(ref _<#= PL #>, value);
        }

        public bool ShouldSerialize<#= N #>()
<#
        if (isMscorlib) {
#>
            => _<#= PL #>?.Count == 1;
<#
        } else {
#>
            => false;
<#
        }
#>

        public bool ShouldSerialize<#= PL #>()
            => _<#= PL #>?.Count > <#= isMscorlib ? 1 : 0 #>;

        public void Reset<#= N #>()
            => _<#= PL #>?.Clear();

        public void Reset<#= PL #>()
            => _<#= PL #>?.Clear();

#endregion <#= N #>

<#
    }

#>
    }
<#
}
#>
    partial class Graph
    {
<#

var objectTypes = new []
{
    "MusicSong", "MusicAlbum", "MusicPlaylist", "MusicRadioStation",
    "VideoMovie", "VideoEpisode", "VideoTVShow", "VideoOther",
    "Article", "Book", "Profile"
};

foreach (var T in objectTypes)
{
#>
        [DefaultValue(null)]
        public <#= T #> <#= T #>
        {
            get => _TypeObject as <#= T #>;
            set => _TypeObject = value ?? (_TypeObject is <#= T #> ? null : _TypeObject);
        }

<#
}

#>
    }
}